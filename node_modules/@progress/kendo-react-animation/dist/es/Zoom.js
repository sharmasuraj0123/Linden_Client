var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as PropTypes from 'prop-types';
import Animation from './Animation';
import { noop } from '@progress/kendo-react-common';
import util from './util';
var Zoom = /** @class */ (function (_super) {
    __extends(Zoom, _super);
    function Zoom(props) {
        var _this = _super.call(this, props) || this;
        _this.componentWillEnter = function (event) {
            var onEnter = _this.props.onEnter;
            _this.updateContainerDimensions(function () {
                if (onEnter) {
                    onEnter.call(undefined, event);
                }
            });
        };
        _this.componentDidEnter = function (event) {
            var onEntered = _this.props.onEntered;
            _this.updateContainerDimensions(function () {
                if (onEntered) {
                    onEntered.call(undefined, event);
                }
            });
        };
        _this.updateContainerDimensions = function (done) {
            if (done === void 0) { done = noop; }
            var content = ReactDOM.findDOMNode(_this).firstChild;
            var style;
            if (_this.props.stackChildren && content) {
                var newHeight = util.outerHeight(content);
                var newWidth = util.outerWidth(content);
                style = {
                    height: newHeight + 'px',
                    width: newWidth + 'px'
                };
            }
            _this.setState({ style: style }, done);
        };
        _this.state = { style: null };
        return _this;
    }
    /**
     * @hidden
     */
    Zoom.prototype.componentWillReceiveProps = function () {
        this.updateContainerDimensions();
    };
    /**
     * @hidden
     */
    Zoom.prototype.componentDidMount = function () {
        this.updateContainerDimensions();
    };
    /**
     * @hidden
     */
    Zoom.prototype.render = function () {
        var _a = this.props, children = _a.children, direction = _a.direction, style = _a.style, other = __rest(_a, ["children", "direction", "style"]);
        return (React.createElement(Animation, __assign({}, other, { onEnter: this.componentWillEnter, onEntered: this.componentDidEnter, transitionName: "zoom-" + direction, style: __assign({ style: style }, this.state.style) }), children));
    };
    /**
     * @hidden
     */
    Zoom.propTypes = {
        children: PropTypes.oneOfType([
            PropTypes.arrayOf(PropTypes.node),
            PropTypes.node
        ]),
        childFactory: PropTypes.any,
        className: PropTypes.string,
        direction: PropTypes.oneOf([
            'in',
            'out'
        ]),
        component: PropTypes.string,
        id: PropTypes.string,
        style: PropTypes.any,
        stackChildren: PropTypes.bool
    };
    /**
     * @hidden
     */
    Zoom.defaultProps = {
        appear: false,
        enter: true,
        exit: true,
        transitionEnterDuration: 300,
        transitionExitDuration: 300,
        direction: 'out',
        stackChildren: false,
    };
    return Zoom;
}(React.Component));
export default Zoom;
//# sourceMappingURL=Zoom.js.map