/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { AnimationInterface } from './AnimationInterface';
/**
 * Represents the props of the Animation component for React.
 */
export interface AnimationProps extends AnimationInterface {
    /**
     * When the element reaches its exit state, it is no longer available in the DOM.
     * For more information if a DOM operation is required,
     * refer to the article on [`Exiting Child`]({% slug exitingchildcomponents_animation %}).
     */
    childFactory?: any;
    /**
     * Specifies the name of the CSS class which is set to the Animation component.
     */
    className?: string;
    /**
     * Specifies the node type of the parent animation component. Defaults to `div`.
     */
    component?: string;
    /**
     * Specifies the id of the Animation component.
     */
    id?: string;
    /**
     * Specifies the style of the parent animation component.
     */
    style?: any;
    /**
     * Specifies whether the animation children should stack on top of each other without interfering.
     */
    stackChildren?: boolean;
    /**
     * Specifies the `classNames` which will be applied during the transition.
     */
    transitionName: string;
    /**
     * Specifies a specific style which will be applied when the animation reaches its entering state.
     */
    animationEnteringStyle?: any;
    /**
     * Specifies a specific styles which will be applied when the animation reaches its entered state.
     */
    animationEnteredStyle?: any;
    /**
     * Specifies a specific styles which will be applied when the animation reaches its exiting state.
     */
    animationExitingStyle?: any;
    /**
     * Specifies a specific styles which will be applied when the animation reaches its exited state.
     */
    animationExitedStyle?: any;
}
export default class Animation extends React.Component<AnimationProps, {}> {
    /**
     * @hidden
     */
    static propTypes: {
        children: PropTypes.Requireable<any>;
        childFactory: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        component: PropTypes.Requireable<any>;
        id: PropTypes.Requireable<any>;
        style: PropTypes.Requireable<any>;
        transitionName: PropTypes.Validator<any>;
        appear: PropTypes.Validator<any>;
        enter: PropTypes.Validator<any>;
        exit: PropTypes.Validator<any>;
        transitionEnterDuration: PropTypes.Validator<any>;
        transitionExitDuration: PropTypes.Validator<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        component: string;
    };
    /**
     * @hidden
     */
    render(): JSX.Element;
}
