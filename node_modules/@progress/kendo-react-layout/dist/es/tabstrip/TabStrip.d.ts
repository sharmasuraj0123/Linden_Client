/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * The arguments that are passed to the `onSelect` callback function.
 */
export interface TabStripSelectEventArguments {
    /**
     * The index of the selected tab.
     */
    selected: number;
}
/**
 * Represents the props of the TabStrip component for React.
 */
export interface TabStripProps {
    /**
     * Enables the tab animation.
     */
    animation?: boolean;
    /**
     * Sets the index of the selected TabStripTab component.
     */
    selected?: number;
    /**
     * @hidden
     */
    style?: any;
    /**
     * Sets the style of the TabStripContent component.
     */
    tabContentStyle?: any;
    /**
     * The position in which the TabStripNavigation components will be rendered.
     *
     * The available options are:
     * - `"top"`&mdash;Renders the `TabStripNavigation` components to the top of the TabStrip.
     * - `"bottom"`&mdash;Renders the `TabStripNavigation` components to the bottom of the TabStrip.
     * - `"left"`&mdash;Renders the `TabStripNavigation` components to the left of the TabStrip.
     * - `"right"`&mdash;Renders the `TabStripNavigation` components to the right of the TabStrip.
     */
    tabPosition?: string;
    /**
     * Sets the `tabIndex` of the TabStripNavigation.
     */
    tabIndex?: number;
    /**
     * Sets the direction of the TabStrip component.
     */
    dir?: string;
    /**
     * Fires each time the user makes a selection.
     */
    onSelect: (e: TabStripSelectEventArguments) => void;
}
export default class TabStrip extends React.Component<TabStripProps, {}> {
    /**
     * @hidden
     */
    static propTypes: {
        animation: PropTypes.Requireable<any>;
        children: PropTypes.Requireable<any>;
        onSelect: PropTypes.Requireable<any>;
        selected: PropTypes.Requireable<any>;
        style: PropTypes.Requireable<any>;
        tabContentStyle: PropTypes.Requireable<any>;
        tabPosition: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        dir: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        animation: boolean;
        tabPosition: string;
    };
    private _element;
    private keyBinding;
    /**
     * @hidden
     */
    onSelect: (index: any) => void;
    /**
     * @hidden
     */
    onKeyDown: (event: any) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private renderContent;
    private invertKeys(original, inverted);
    private firstNavigatableTab;
    private lastNavigatableTab;
    private prevNavigatableTab;
    private nextNavigatableTab;
}
